// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello_world_go/ent/predicate"
	"hello_world_go/ent/user"
	"hello_world_go/ent/videos"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideosUpdate is the builder for updating Videos entities.
type VideosUpdate struct {
	config
	hooks    []Hook
	mutation *VideosMutation
}

// Where appends a list predicates to the VideosUpdate builder.
func (vu *VideosUpdate) Where(ps ...predicate.Videos) *VideosUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VideosUpdate) SetTitle(s string) *VideosUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableTitle(s *string) *VideosUpdate {
	if s != nil {
		vu.SetTitle(*s)
	}
	return vu
}

// SetDescription sets the "description" field.
func (vu *VideosUpdate) SetDescription(s string) *VideosUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableDescription(s *string) *VideosUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VideosUpdate) ClearDescription() *VideosUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetURL sets the "url" field.
func (vu *VideosUpdate) SetURL(s string) *VideosUpdate {
	vu.mutation.SetURL(s)
	return vu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableURL(s *string) *VideosUpdate {
	if s != nil {
		vu.SetURL(*s)
	}
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VideosUpdate) SetCreatedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableCreatedAt(t *time.Time) *VideosUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VideosUpdate) SetUpdatedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VideosUpdate) SetDeletedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableDeletedAt(t *time.Time) *VideosUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VideosUpdate) ClearDeletedAt() *VideosUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetThumbnail sets the "thumbnail" field.
func (vu *VideosUpdate) SetThumbnail(s string) *VideosUpdate {
	vu.mutation.SetThumbnail(s)
	return vu
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableThumbnail(s *string) *VideosUpdate {
	if s != nil {
		vu.SetThumbnail(*s)
	}
	return vu
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (vu *VideosUpdate) ClearThumbnail() *VideosUpdate {
	vu.mutation.ClearThumbnail()
	return vu
}

// SetCategory sets the "category" field.
func (vu *VideosUpdate) SetCategory(s string) *VideosUpdate {
	vu.mutation.SetCategory(s)
	return vu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableCategory(s *string) *VideosUpdate {
	if s != nil {
		vu.SetCategory(*s)
	}
	return vu
}

// ClearCategory clears the value of the "category" field.
func (vu *VideosUpdate) ClearCategory() *VideosUpdate {
	vu.mutation.ClearCategory()
	return vu
}

// SetTags sets the "tags" field.
func (vu *VideosUpdate) SetTags(s string) *VideosUpdate {
	vu.mutation.SetTags(s)
	return vu
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableTags(s *string) *VideosUpdate {
	if s != nil {
		vu.SetTags(*s)
	}
	return vu
}

// ClearTags clears the value of the "tags" field.
func (vu *VideosUpdate) ClearTags() *VideosUpdate {
	vu.mutation.ClearTags()
	return vu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vu *VideosUpdate) SetUserID(id int) *VideosUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vu *VideosUpdate) SetNillableUserID(id *int) *VideosUpdate {
	if id != nil {
		vu = vu.SetUserID(*id)
	}
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VideosUpdate) SetUser(u *User) *VideosUpdate {
	return vu.SetUserID(u.ID)
}

// Mutation returns the VideosMutation object of the builder.
func (vu *VideosUpdate) Mutation() *VideosMutation {
	return vu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VideosUpdate) ClearUser() *VideosUpdate {
	vu.mutation.ClearUser()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideosUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideosUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideosUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideosUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VideosUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := videos.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VideosUpdate) check() error {
	if v, ok := vu.mutation.Title(); ok {
		if err := videos.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Videos.title": %w`, err)}
		}
	}
	if v, ok := vu.mutation.URL(); ok {
		if err := videos.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Videos.url": %w`, err)}
		}
	}
	return nil
}

func (vu *VideosUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.SetField(videos.FieldTitle, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(videos.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(videos.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.URL(); ok {
		_spec.SetField(videos.FieldURL, field.TypeString, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(videos.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(videos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(videos.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(videos.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.Thumbnail(); ok {
		_spec.SetField(videos.FieldThumbnail, field.TypeString, value)
	}
	if vu.mutation.ThumbnailCleared() {
		_spec.ClearField(videos.FieldThumbnail, field.TypeString)
	}
	if value, ok := vu.mutation.Category(); ok {
		_spec.SetField(videos.FieldCategory, field.TypeString, value)
	}
	if vu.mutation.CategoryCleared() {
		_spec.ClearField(videos.FieldCategory, field.TypeString)
	}
	if value, ok := vu.mutation.Tags(); ok {
		_spec.SetField(videos.FieldTags, field.TypeString, value)
	}
	if vu.mutation.TagsCleared() {
		_spec.ClearField(videos.FieldTags, field.TypeString)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideosUpdateOne is the builder for updating a single Videos entity.
type VideosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideosMutation
}

// SetTitle sets the "title" field.
func (vuo *VideosUpdateOne) SetTitle(s string) *VideosUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableTitle(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetTitle(*s)
	}
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VideosUpdateOne) SetDescription(s string) *VideosUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableDescription(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VideosUpdateOne) ClearDescription() *VideosUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetURL sets the "url" field.
func (vuo *VideosUpdateOne) SetURL(s string) *VideosUpdateOne {
	vuo.mutation.SetURL(s)
	return vuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableURL(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetURL(*s)
	}
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VideosUpdateOne) SetCreatedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableCreatedAt(t *time.Time) *VideosUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VideosUpdateOne) SetUpdatedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VideosUpdateOne) SetDeletedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableDeletedAt(t *time.Time) *VideosUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VideosUpdateOne) ClearDeletedAt() *VideosUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetThumbnail sets the "thumbnail" field.
func (vuo *VideosUpdateOne) SetThumbnail(s string) *VideosUpdateOne {
	vuo.mutation.SetThumbnail(s)
	return vuo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableThumbnail(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetThumbnail(*s)
	}
	return vuo
}

// ClearThumbnail clears the value of the "thumbnail" field.
func (vuo *VideosUpdateOne) ClearThumbnail() *VideosUpdateOne {
	vuo.mutation.ClearThumbnail()
	return vuo
}

// SetCategory sets the "category" field.
func (vuo *VideosUpdateOne) SetCategory(s string) *VideosUpdateOne {
	vuo.mutation.SetCategory(s)
	return vuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableCategory(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetCategory(*s)
	}
	return vuo
}

// ClearCategory clears the value of the "category" field.
func (vuo *VideosUpdateOne) ClearCategory() *VideosUpdateOne {
	vuo.mutation.ClearCategory()
	return vuo
}

// SetTags sets the "tags" field.
func (vuo *VideosUpdateOne) SetTags(s string) *VideosUpdateOne {
	vuo.mutation.SetTags(s)
	return vuo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableTags(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetTags(*s)
	}
	return vuo
}

// ClearTags clears the value of the "tags" field.
func (vuo *VideosUpdateOne) ClearTags() *VideosUpdateOne {
	vuo.mutation.ClearTags()
	return vuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vuo *VideosUpdateOne) SetUserID(id int) *VideosUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableUserID(id *int) *VideosUpdateOne {
	if id != nil {
		vuo = vuo.SetUserID(*id)
	}
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VideosUpdateOne) SetUser(u *User) *VideosUpdateOne {
	return vuo.SetUserID(u.ID)
}

// Mutation returns the VideosMutation object of the builder.
func (vuo *VideosUpdateOne) Mutation() *VideosMutation {
	return vuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VideosUpdateOne) ClearUser() *VideosUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// Where appends a list predicates to the VideosUpdate builder.
func (vuo *VideosUpdateOne) Where(ps ...predicate.Videos) *VideosUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideosUpdateOne) Select(field string, fields ...string) *VideosUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Videos entity.
func (vuo *VideosUpdateOne) Save(ctx context.Context) (*Videos, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideosUpdateOne) SaveX(ctx context.Context) *Videos {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideosUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideosUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VideosUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := videos.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VideosUpdateOne) check() error {
	if v, ok := vuo.mutation.Title(); ok {
		if err := videos.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Videos.title": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.URL(); ok {
		if err := videos.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Videos.url": %w`, err)}
		}
	}
	return nil
}

func (vuo *VideosUpdateOne) sqlSave(ctx context.Context) (_node *Videos, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Videos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videos.FieldID)
		for _, f := range fields {
			if !videos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.SetField(videos.FieldTitle, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(videos.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(videos.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.URL(); ok {
		_spec.SetField(videos.FieldURL, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(videos.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(videos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(videos.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(videos.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.Thumbnail(); ok {
		_spec.SetField(videos.FieldThumbnail, field.TypeString, value)
	}
	if vuo.mutation.ThumbnailCleared() {
		_spec.ClearField(videos.FieldThumbnail, field.TypeString)
	}
	if value, ok := vuo.mutation.Category(); ok {
		_spec.SetField(videos.FieldCategory, field.TypeString, value)
	}
	if vuo.mutation.CategoryCleared() {
		_spec.ClearField(videos.FieldCategory, field.TypeString)
	}
	if value, ok := vuo.mutation.Tags(); ok {
		_spec.SetField(videos.FieldTags, field.TypeString, value)
	}
	if vuo.mutation.TagsCleared() {
		_spec.ClearField(videos.FieldTags, field.TypeString)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Videos{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
