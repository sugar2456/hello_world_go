// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"hello_world_go/ent/user"
	"hello_world_go/ent/videos"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Videos is the model entity for the Videos schema.
type Videos struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Thumbnail holds the value of the "thumbnail" field.
	Thumbnail string `json:"thumbnail,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideosQuery when eager-loading is set.
	Edges        VideosEdges `json:"edges"`
	user_videos  *int
	selectValues sql.SelectValues
}

// VideosEdges holds the relations/edges for other nodes in the graph.
type VideosEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideosEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Videos) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videos.FieldID:
			values[i] = new(sql.NullInt64)
		case videos.FieldTitle, videos.FieldDescription, videos.FieldURL, videos.FieldThumbnail, videos.FieldCategory, videos.FieldTags:
			values[i] = new(sql.NullString)
		case videos.FieldCreatedAt, videos.FieldUpdatedAt, videos.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case videos.ForeignKeys[0]: // user_videos
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Videos fields.
func (v *Videos) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videos.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case videos.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case videos.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case videos.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				v.URL = value.String
			}
		case videos.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case videos.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case videos.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = value.Time
			}
		case videos.FieldThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail", values[i])
			} else if value.Valid {
				v.Thumbnail = value.String
			}
		case videos.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				v.Category = value.String
			}
		case videos.FieldTags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value.Valid {
				v.Tags = value.String
			}
		case videos.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_videos", value)
			} else if value.Valid {
				v.user_videos = new(int)
				*v.user_videos = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Videos.
// This includes values selected through modifiers, order, etc.
func (v *Videos) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Videos entity.
func (v *Videos) QueryUser() *UserQuery {
	return NewVideosClient(v.config).QueryUser(v)
}

// Update returns a builder for updating this Videos.
// Note that you need to call Videos.Unwrap() before calling this method if this Videos
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Videos) Update() *VideosUpdateOne {
	return NewVideosClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Videos entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Videos) Unwrap() *Videos {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Videos is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Videos) String() string {
	var builder strings.Builder
	builder.WriteString("Videos(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("title=")
	builder.WriteString(v.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(v.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(v.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("thumbnail=")
	builder.WriteString(v.Thumbnail)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(v.Category)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(v.Tags)
	builder.WriteByte(')')
	return builder.String()
}

// VideosSlice is a parsable slice of Videos.
type VideosSlice []*Videos
