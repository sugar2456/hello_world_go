// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello_world_go/ent/playlist"
	"hello_world_go/ent/predicate"
	"hello_world_go/ent/user"
	"hello_world_go/ent/videos"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaylistUpdate is the builder for updating Playlist entities.
type PlaylistUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (pu *PlaylistUpdate) Where(ps ...predicate.Playlist) *PlaylistUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PlaylistUpdate) SetTitle(s string) *PlaylistUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableTitle(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlaylistUpdate) SetDescription(s string) *PlaylistUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableDescription(s *string) *PlaylistUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlaylistUpdate) ClearDescription() *PlaylistUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PlaylistUpdate) SetUserID(i int) *PlaylistUpdate {
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableUserID(i *int) *PlaylistUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *PlaylistUpdate) ClearUserID() *PlaylistUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PlaylistUpdate) SetCreatedAt(t time.Time) *PlaylistUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PlaylistUpdate) SetNillableCreatedAt(t *time.Time) *PlaylistUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlaylistUpdate) SetUpdatedAt(t time.Time) *PlaylistUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PlaylistUpdate) SetUser(u *User) *PlaylistUpdate {
	return pu.SetUserID(u.ID)
}

// AddVideoIDs adds the "videos" edge to the Videos entity by IDs.
func (pu *PlaylistUpdate) AddVideoIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.AddVideoIDs(ids...)
	return pu
}

// AddVideos adds the "videos" edges to the Videos entity.
func (pu *PlaylistUpdate) AddVideos(v ...*Videos) *PlaylistUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVideoIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (pu *PlaylistUpdate) Mutation() *PlaylistMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PlaylistUpdate) ClearUser() *PlaylistUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearVideos clears all "videos" edges to the Videos entity.
func (pu *PlaylistUpdate) ClearVideos() *PlaylistUpdate {
	pu.mutation.ClearVideos()
	return pu
}

// RemoveVideoIDs removes the "videos" edge to Videos entities by IDs.
func (pu *PlaylistUpdate) RemoveVideoIDs(ids ...int) *PlaylistUpdate {
	pu.mutation.RemoveVideoIDs(ids...)
	return pu
}

// RemoveVideos removes "videos" edges to Videos entities.
func (pu *PlaylistUpdate) RemoveVideos(v ...*Videos) *PlaylistUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaylistUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaylistUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaylistUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaylistUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlaylistUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := playlist.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaylistUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := playlist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Playlist.title": %w`, err)}
		}
	}
	return nil
}

func (pu *PlaylistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(playlist.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(playlist.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(playlist.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(playlist.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(playlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.UserTable,
			Columns: []string{playlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.UserTable,
			Columns: []string{playlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !pu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaylistUpdateOne is the builder for updating a single Playlist entity.
type PlaylistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistMutation
}

// SetTitle sets the "title" field.
func (puo *PlaylistUpdateOne) SetTitle(s string) *PlaylistUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableTitle(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlaylistUpdateOne) SetDescription(s string) *PlaylistUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableDescription(s *string) *PlaylistUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlaylistUpdateOne) ClearDescription() *PlaylistUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *PlaylistUpdateOne) SetUserID(i int) *PlaylistUpdateOne {
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableUserID(i *int) *PlaylistUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *PlaylistUpdateOne) ClearUserID() *PlaylistUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PlaylistUpdateOne) SetCreatedAt(t time.Time) *PlaylistUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PlaylistUpdateOne) SetNillableCreatedAt(t *time.Time) *PlaylistUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlaylistUpdateOne) SetUpdatedAt(t time.Time) *PlaylistUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PlaylistUpdateOne) SetUser(u *User) *PlaylistUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddVideoIDs adds the "videos" edge to the Videos entity by IDs.
func (puo *PlaylistUpdateOne) AddVideoIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.AddVideoIDs(ids...)
	return puo
}

// AddVideos adds the "videos" edges to the Videos entity.
func (puo *PlaylistUpdateOne) AddVideos(v ...*Videos) *PlaylistUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVideoIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (puo *PlaylistUpdateOne) Mutation() *PlaylistMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PlaylistUpdateOne) ClearUser() *PlaylistUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearVideos clears all "videos" edges to the Videos entity.
func (puo *PlaylistUpdateOne) ClearVideos() *PlaylistUpdateOne {
	puo.mutation.ClearVideos()
	return puo
}

// RemoveVideoIDs removes the "videos" edge to Videos entities by IDs.
func (puo *PlaylistUpdateOne) RemoveVideoIDs(ids ...int) *PlaylistUpdateOne {
	puo.mutation.RemoveVideoIDs(ids...)
	return puo
}

// RemoveVideos removes "videos" edges to Videos entities.
func (puo *PlaylistUpdateOne) RemoveVideos(v ...*Videos) *PlaylistUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVideoIDs(ids...)
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (puo *PlaylistUpdateOne) Where(ps ...predicate.Playlist) *PlaylistUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaylistUpdateOne) Select(field string, fields ...string) *PlaylistUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Playlist entity.
func (puo *PlaylistUpdateOne) Save(ctx context.Context) (*Playlist, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaylistUpdateOne) SaveX(ctx context.Context) *Playlist {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaylistUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaylistUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlaylistUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := playlist.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaylistUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := playlist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Playlist.title": %w`, err)}
		}
	}
	return nil
}

func (puo *PlaylistUpdateOne) sqlSave(ctx context.Context) (_node *Playlist, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playlist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlist.FieldID)
		for _, f := range fields {
			if !playlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(playlist.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(playlist.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(playlist.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(playlist.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(playlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.UserTable,
			Columns: []string{playlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlist.UserTable,
			Columns: []string{playlist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !puo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.VideosTable,
			Columns: []string{playlist.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlist{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
