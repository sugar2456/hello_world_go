// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"hello_world_go/ent/user"
	"hello_world_go/ent/videos"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideosCreate is the builder for creating a Videos entity.
type VideosCreate struct {
	config
	mutation *VideosMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (vc *VideosCreate) SetTitle(s string) *VideosCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetDescription sets the "description" field.
func (vc *VideosCreate) SetDescription(s string) *VideosCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VideosCreate) SetNillableDescription(s *string) *VideosCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetURL sets the "url" field.
func (vc *VideosCreate) SetURL(s string) *VideosCreate {
	vc.mutation.SetURL(s)
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VideosCreate) SetCreatedAt(t time.Time) *VideosCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VideosCreate) SetNillableCreatedAt(t *time.Time) *VideosCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VideosCreate) SetUpdatedAt(t time.Time) *VideosCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VideosCreate) SetNillableUpdatedAt(t *time.Time) *VideosCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VideosCreate) SetDeletedAt(t time.Time) *VideosCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VideosCreate) SetNillableDeletedAt(t *time.Time) *VideosCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetThumbnail sets the "thumbnail" field.
func (vc *VideosCreate) SetThumbnail(s string) *VideosCreate {
	vc.mutation.SetThumbnail(s)
	return vc
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (vc *VideosCreate) SetNillableThumbnail(s *string) *VideosCreate {
	if s != nil {
		vc.SetThumbnail(*s)
	}
	return vc
}

// SetCategory sets the "category" field.
func (vc *VideosCreate) SetCategory(s string) *VideosCreate {
	vc.mutation.SetCategory(s)
	return vc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (vc *VideosCreate) SetNillableCategory(s *string) *VideosCreate {
	if s != nil {
		vc.SetCategory(*s)
	}
	return vc
}

// SetTags sets the "tags" field.
func (vc *VideosCreate) SetTags(s string) *VideosCreate {
	vc.mutation.SetTags(s)
	return vc
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (vc *VideosCreate) SetNillableTags(s *string) *VideosCreate {
	if s != nil {
		vc.SetTags(*s)
	}
	return vc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vc *VideosCreate) SetUserID(id int) *VideosCreate {
	vc.mutation.SetUserID(id)
	return vc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vc *VideosCreate) SetNillableUserID(id *int) *VideosCreate {
	if id != nil {
		vc = vc.SetUserID(*id)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VideosCreate) SetUser(u *User) *VideosCreate {
	return vc.SetUserID(u.ID)
}

// Mutation returns the VideosMutation object of the builder.
func (vc *VideosCreate) Mutation() *VideosMutation {
	return vc.mutation
}

// Save creates the Videos in the database.
func (vc *VideosCreate) Save(ctx context.Context) (*Videos, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VideosCreate) SaveX(ctx context.Context) *Videos {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VideosCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VideosCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VideosCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := videos.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := videos.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VideosCreate) check() error {
	if _, ok := vc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Videos.title"`)}
	}
	if v, ok := vc.mutation.Title(); ok {
		if err := videos.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Videos.title": %w`, err)}
		}
	}
	if _, ok := vc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Videos.url"`)}
	}
	if v, ok := vc.mutation.URL(); ok {
		if err := videos.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Videos.url": %w`, err)}
		}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Videos.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Videos.updated_at"`)}
	}
	return nil
}

func (vc *VideosCreate) sqlSave(ctx context.Context) (*Videos, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VideosCreate) createSpec() (*Videos, *sqlgraph.CreateSpec) {
	var (
		_node = &Videos{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(videos.Table, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeInt))
	)
	if value, ok := vc.mutation.Title(); ok {
		_spec.SetField(videos.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.SetField(videos.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := vc.mutation.URL(); ok {
		_spec.SetField(videos.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(videos.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(videos.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(videos.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vc.mutation.Thumbnail(); ok {
		_spec.SetField(videos.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = value
	}
	if value, ok := vc.mutation.Category(); ok {
		_spec.SetField(videos.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := vc.mutation.Tags(); ok {
		_spec.SetField(videos.FieldTags, field.TypeString, value)
		_node.Tags = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videos.UserTable,
			Columns: []string{videos.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_videos = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideosCreateBulk is the builder for creating many Videos entities in bulk.
type VideosCreateBulk struct {
	config
	err      error
	builders []*VideosCreate
}

// Save creates the Videos entities in the database.
func (vcb *VideosCreateBulk) Save(ctx context.Context) ([]*Videos, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Videos, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideosMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VideosCreateBulk) SaveX(ctx context.Context) []*Videos {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VideosCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VideosCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
